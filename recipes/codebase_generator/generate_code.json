{
  "steps": [
    {
      "type": "read_file",
      "path": "recipes/codebase_generator/includes/IMPLEMENTATION_PHILOSOPHY.md",
      "artifact": "implementation_philosophy"
    },
    {
      "type": "generate",
      "prompt": "You are an expert developer. Based on the following specification{% if existing_code %} and existing code{% endif %}, generate {{language|default:'python'}} code for the {{component_id}} component of a larger project.\n\nSpecification:\n{{spec}}\n\n{% if existing_code %}<EXISTING_CODE>\n{{existing_code}}\n</EXISTING_CODE>\n\n{% endif %}{% if usage_doc %}<USAGE_DOCUMENTATION>\n{{usage_doc}}\n</USAGE_DOCUMENTATION>\n{% endif %}{% if additional_content %}{{additional_content}}{% endif %}\n\nEnsure the code follows the specification exactly, implements all required functionality, and adheres to the implementation philosophy described in the tags. Include appropriate error handling and type hints. The implementation should be minimal but complete.\n\n<IMPLEMENTATION_PHILOSOPHY>\n{{implementation_philosophy}}\n</IMPLEMENTATION_PHILOSOPHY>\n\n{% if language == 'typescript' or language == 'javascript' %}\n# React Component Guidelines\n- For React components, name the main component file \"TodoApp.tsx\" (or jsx), not TodoApplication\n- Name exported functions to match the component file name (e.g., \"export const TodoApp\" not \"export const TodoApplication\")\n- Include data-testid attributes on key elements for testing\n- Create a types.ts file for shared interfaces and types\n- Ensure that component props and state follow the interfaces defined in types.ts\n- For todo items with completion status, add a CSS class \"completed\" for styling when completed\n- For inputs, use placeholder text like \"Add new todo\"\n- Include properly labeled buttons for actions\n- When using localStorage with useState, never use initializer functions in useState directly - use a separate useEffect with empty dependency array\n- Use React.FC<Props> type for functional components\n\n# Also create application entry files\n- Create an index.html file at the project root with a div#root and a type=\"module\" script tag pointing to \"/src/main.tsx\"\n- Create a src/main.tsx as the entry point that uses React 18's createRoot API from 'react-dom/client' to render the App component\n- Create a src/App.tsx component that imports and renders the TodoApp\n- Create a src/index.css for global styling, including the .completed class\n{% endif %}\n\nGenerate the appropriate file(s): {{output_path|default:'.'}}/{{component_id}}.<ext>, etc.\n\n",
      "model": "{{model|default:'azure:o3-mini'}}",
      "artifact": "generated_code"
    },
    {
      "type": "write_file",
      "artifact": "generated_code",
      "root": "{{output_root|default:'output'}}"
    }
  ]
}